/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './loading-bar.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/debug_context';
import * as import3 from '@angular/core/src/render/api';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@ngrx/store/src/store';
import * as import10 from './loading-bar.component.scss.shim';
import * as import11 from '@angular/core/src/linker/template_ref';
import * as import12 from '@angular/common/src/directives/ng_if';
import * as import13 from '@angular/core/src/linker/view_container';
import * as import14 from '../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import15 from '@angular/common/src/pipes/async_pipe';
import * as import16 from '@angular/material/progress-bar/progress-bar';
import * as import17 from '@angular/material/core/compatibility/style-compatibility';
import * as import18 from '../../../node_modules/@angular/material/progress-bar/progress-bar.ngfactory';
import * as import19 from '../../../node_modules/@angular/material/core/compatibility/style-compatibility.ngfactory';
import * as import20 from '@angular/core/src/linker/element_ref';
export class Wrapper_LoadingBarComponent {
  /*private*/ _eventHandler:Function;
  context:import0.LoadingBarComponent;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.LoadingBarComponent(p0);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_LoadingBarComponent_Host0:import2.StaticNodeDebugInfo[] = [new import2.StaticNodeDebugInfo([import0.LoadingBarComponent],import0.LoadingBarComponent,{})];
var renderType_LoadingBarComponent_Host:import3.RenderComponentType = import4.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_LoadingBarComponent_Host0 extends import1.DebugAppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.LoadingBarComponent>;
  _LoadingBarComponent_0_3:Wrapper_LoadingBarComponent;
  constructor(viewUtils:import4.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LoadingBarComponent_Host0,renderType_LoadingBarComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_LoadingBarComponent_Host0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer,'loading-bar',import4.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_LoadingBarComponent0(this.viewUtils,this,0,this._el_0);
    this._LoadingBarComponent_0_3 = new Wrapper_LoadingBarComponent(this.injectorGet(import9.Store,this.parentIndex));
    this.compView_0.create(this._LoadingBarComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._LoadingBarComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.LoadingBarComponent) && (0 === requestNodeIndex))) { return this._LoadingBarComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._LoadingBarComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const LoadingBarComponentNgFactory:import8.ComponentFactory<import0.LoadingBarComponent> = new import8.ComponentFactory<import0.LoadingBarComponent>('loading-bar',View_LoadingBarComponent_Host0,import0.LoadingBarComponent);
const styles_LoadingBarComponent:any[] = [import10.styles];
const nodeDebugInfos_LoadingBarComponent0:import2.StaticNodeDebugInfo[] = [
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo([
    import11.TemplateRef,
    import12.NgIf
  ]
  ,(null as any),{})
]
;
var renderType_LoadingBarComponent:import3.RenderComponentType = import4.createRenderComponentType('C:/Users/Fabian/OneDrive/AngularStarter/OAuthApi.AuthServer/App/src/shared/loading-bar/loading-bar.component.ts class LoadingBarComponent - inline template',0,import5.ViewEncapsulation.Emulated,styles_LoadingBarComponent,{});
export class View_LoadingBarComponent0 extends import1.DebugAppView<import0.LoadingBarComponent> {
  _text_0:any;
  _anchor_1:any;
  /*private*/ _vc_1:import13.ViewContainer;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import14.Wrapper_NgIf;
  _pipe_async_0:import15.AsyncPipe;
  constructor(viewUtils:import4.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_LoadingBarComponent0,renderType_LoadingBarComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_LoadingBarComponent0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',this.debug(0,0,0));
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,this.debug(1,1,0));
    this._vc_1 = new import13.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import11.TemplateRef_(this,1,this._anchor_1);
    this._NgIf_1_6 = new import14.Wrapper_NgIf(this._vc_1.vcRef,this._TemplateRef_1_5);
    this.debug((null as any),(null as any),(null as any));
    this._pipe_async_0 = new import15.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._anchor_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import12.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import7.ValueUnwrapper();
    this.debug(1,1,5);
    valUnwrapper.reset();
    const currVal_1_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.loading$));
    this._NgIf_1_6.check_ngIf(currVal_1_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this._NgIf_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
    this.debug(1,1,0);
    this._pipe_async_0.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import1.AppView<any> {
    if ((nodeIndex == 1)) { return new View_LoadingBarComponent1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    return (null as any);
  }
}
const nodeDebugInfos_LoadingBarComponent1:import2.StaticNodeDebugInfo[] = [
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo([
    import16.MdProgressBar,
    import17.StyleCompatibility
  ]
  ,import16.MdProgressBar,{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
class View_LoadingBarComponent1 extends import1.DebugAppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import1.AppView<import16.MdProgressBar>;
  _MdProgressBar_2_3:import18.Wrapper_MdProgressBar;
  _StyleCompatibility_2_4:import19.Wrapper_StyleCompatibility;
  _text_3:any;
  constructor(viewUtils:import4.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import13.ViewContainer) {
    super(View_LoadingBarComponent1,renderType_LoadingBarComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_LoadingBarComponent1,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import4.createRenderElement(this.renderer,(null as any),'div',import4.EMPTY_INLINE_ARRAY,this.debug(0,1,0));
    this._text_1 = this.renderer.createText(this._el_0,'\n    ',this.debug(1,1,30));
    this._el_2 = import4.createRenderElement(this.renderer,this._el_0,'md-progress-bar',new import4.InlineArray8(8,'aria-valuemax','100','aria-valuemin','0','mode','indeterminate','role','progressbar'),this.debug(2,2,4));
    this.compView_2 = new import18.View_MdProgressBar0(this.viewUtils,this,2,this._el_2);
    this._MdProgressBar_2_3 = new import18.Wrapper_MdProgressBar();
    this._StyleCompatibility_2_4 = new import19.Wrapper_StyleCompatibility(this.renderer,new import20.ElementRef(this._el_2));
    this.compView_2.create(this._MdProgressBar_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n',this.debug(3,2,60));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.MdProgressBar) && (2 === requestNodeIndex))) { return this._MdProgressBar_2_3.context; }
    if (((token === import17.StyleCompatibility) && (2 === requestNodeIndex))) { return this._StyleCompatibility_2_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(2,2,21);
    const currVal_2_0_0:any = 'indeterminate';
    this._MdProgressBar_2_3.check_mode(currVal_2_0_0,throwOnChange,false);
    if (this._MdProgressBar_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    this.debug(2,2,4);
    this._StyleCompatibility_2_4.ngDoCheck(this,this._el_2,throwOnChange);
    this._MdProgressBar_2_3.checkHost(this,this.compView_2,this._el_2,throwOnChange);
    this.compView_2.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}